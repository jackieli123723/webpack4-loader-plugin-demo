lenovo@lenovo-PC MINGW64 /e/jackieli/webpack-loader-babel-plugins/webpack4-loader-demo
$ npm run build

> learning-webpack@1.0.0 build E:\jackieli\webpack-loader-babel-plugins\webpack4-loader-demo
> webpack --mode production --colors

console.log('hello react test ')
bundle.js
Hash: faecf20d1cfaa4280ac9
Version: webpack 4.27.1
Time: 122ms
Built at: 2018-12-19 13:51:08
    Asset       Size  Chunks             Chunk Names
bundle.js  962 bytes       0  [emitted]  index
Entrypoint index = bundle.js
[0] ./index.js 32 bytes {0} [built]
lenovo@lenovo-PC MINGW64 /e/jackieli/webpack-loader-babel-plugins/webpack4-loader-demo (master)
$ npm run build

> learning-webpack@1.0.0 build E:\jackieli\webpack-loader-babel-plugins\webpack4-loader-demo
> webpack --mode production --colors

bundle.js
Hash: f66e96a2ccf20b1046bb
Version: webpack 4.29.6
Time: 366ms
Built at: 2019-04-08 15:32:08
    Asset        Size  Chunks             Chunk Names
bundle.js  1020 bytes       0  [emitted]  index
Entrypoint index = bundle.js
[0] ./index.js 26 bytes {0} [built]
lenovo@lenovo-PC MINGW64 /e/jackieli/webpack-loader-babel-plugins/webpack4-loader-demo (master)
$ npm run build

> learning-webpack@1.0.0 build E:\jackieli\webpack-loader-babel-plugins\webpack4-loader-demo
> webpack --mode production --colors

bundle.js
Hash: 21471f4ce2dcfe33516d
Version: webpack 4.12.0
Time: 109ms
Built at: 2019-04-08 15:27:48
    Asset        Size  Chunks             Chunk Names
bundle.js  1020 bytes       0  [emitted]  index
[0] ./index.js 26 bytes {0} [built]



##webpack4
   "webpack": "^4.12.0",
    "webpack-cli": "^3.0.3"
##webpack3

"webpack": "^3.10.0",
    "webpack-cli": "^3.3.0"
   E:\jackieli\webpack-loader-babel-plugins\webpack4-loader-demo\node_modules\webpack\bin\webpack.js:348
                        throw err;
                        ^

TypeError: Cannot read property 'done' of undefined
 

## 
compiler.plugin('emit',function(compilation, callback) {
  // 支持处理逻辑

  // 处理完毕后执行 callback 以通知 Webpack 
  // 如果不执行 callback，运行流程将会一直卡在这不往下执行 
  callback();
});



###

lenovo@lenovo-PC MINGW64 /e/jackieli/webpack-loader-babel-plugins/webpack4-loader-demo (master)
$ npm run dev

> learning-webpack@1.0.0 dev E:\jackieli\webpack-loader-babel-plugins\webpack4-loader-demo
> webpack --config webpack.config.js  --mode production --profile --colors

22
bundle.js
11
bundle.js
filelist1554713718847.md
Hash: f66e96a2ccf20b1046bb
Version: webpack 4.29.6
Time: 118ms
Built at: 2019-04-08 16:55:18
                   Asset        Size  Chunks             Chunk Names
               bundle.js  1020 bytes       0  [emitted]  index
filelist1554713718847.md    28 bytes          [emitted]
Entrypoint index = bundle.js
[0] ./index.js 26 bytes {0} [built]
    factory:45ms building:20ms = 65ms

compiler.hooks.emit.tapAsync >   compiler.hooks.done.tapAsync  emit.tapAsync先执行

     




## 不调用 cb()
    
更新

lenovo@lenovo-PC MINGW64 /e/jackieli/webpack-loader-babel-plugins/webpack4-loader-demo
$ npm run build

> learning-webpack@1.0.0 build E:\jackieli\webpack-loader-babel-plugins\webpack4-loader-demo
> webpack --mode production --colors

console.log('hello react test ')
bundle.js


###

classUglifyJsPlugin {
	apply(compiler) {
		constoptions = this.options;
		options.test = options.test || ///.js($|//?)/i;......//绑定compilation事件compiler.plugin("compilation",
		(compilation) = >{
			if (options.sourceMap) {
				compilation.plugin("build-module", (module) = >{
					//togetdetailedlocationinfoabouterrorsmodule.useSourceMap=true;
				});
			} //绑定optimize-chunk-assets事件compilation.plugin("optimize-chunk-assets",
			(chunks, callback) = >{
				constfiles = [

				];
				chunks.forEach((chunk) = >files.push.apply(files, chunk.files));......callback();
			});
		});
	}
}
module.exports = UglifyJsPlugin;


##babel plugin

index2.js
let bad = true;

lenovo@lenovo-PC MINGW64 /e/jackieli/webpack-loader-babel-plugins/webpack4-loader-demo (master)

 $  npx babel --plugins ./babel-plugins/plugin index2.js

 let good = true;


lenovo@lenovo-PC MINGW64 /e/jackieli/webpack-loader-babel-plugins/webpack4-loader-demo (master)
$  npx babel --plugins ./babel-plugins/plugin index2.js
// let bad = true;
sebmck === dork;


{
  "plugins": [ 
	  ["./babel-plugins/plugin", {
	    "bad": "good",
	    "dead": "alive"
	  }] 
  ]
}
也可以不带 参数
{
  "plugins": [ 
	  ["./babel-plugins/plugin"] 
  ]
}

lenovo@lenovo-PC MINGW64 /e/jackieli/webpack-loader-babel-plugins/webpack4-loader-demo (master)
$  npx babel --plugins ./babel-plugins/plugin index2.js
Called!
let good = true;
sebmck === dork;



lenovo@lenovo-PC MINGW64 /e/jackieli/webpack-loader-babel-plugins/webpack4-loader-demo (master)
$ babel --plugins ./babel-plugins/plugin index2.js --out-file script-compiled.js
Called!



写入.babelrc 或者写入babel.config.js 可以打包时候不用带上--plugins ./babel-plugins/plugin 参数
{
  plugins: [ 
	  ["./babel-plugins/plugin", {
	    "bad": "good",
	    "dead": "alive"
	  }] 
  ]
}

不要后面的参数{}对象也可以 里面这是些配置项
{
  plugins: [ 
	  ["./babel-plugins/plugin"] 
  ]
}
lenovo@lenovo-PC MINGW64 /e/jackieli/webpack-loader-babel-plugins/webpack4-loader-demo (master)
$ babel  index2.js --out-file script-compiled2.js
Called!




## 如何把webpack loader 和 babel plugin 自己写的结合起来用呢？

将代码 
```
let bad = true;
foo === bar;

console.log('hello jackieli')

```
编译为这样 不是混线的 -- >> 然后 通过混淆 

```
let good = true;
sebmck === dork;

console.log('hello world');

```
如何做到 






编写你的第一个 Babel 插件
现在你已经熟悉了 Babel 的所有基础知识了，让我们把这些知识和插件的 API融合在一起来编写第一个 Babel 插件吧。

先从一个接收了当前babel对象作为参数的 function 开始。

export default function(babel) {
  // plugin contents
}
由于你将会经常这样使用，所以直接取出 babel.types 会更方便：（译注：这是 ES2015 语法中的对象解构，即 Destructuring）

export default function({ types: t }) {
  // plugin contents
}
接着返回一个对象，其 visitor 属性是这个插件的主要访问者。

export default function({ types: t }) {
  return {
    visitor: {
      // visitor contents
    }
  };
};
Visitor 中的每个函数接收2个参数：path 和 state

export default function({ types: t }) {
  return {
    visitor: {
      Identifier(path, state) {},
      ASTNodeTypeHere(path, state) {}
    }
  };
};
让我们快速编写一个可用的插件来展示一下它是如何工作的。下面是我们的源代码：

foo === bar;
其 AST 形式如下：

{
  type: "BinaryExpression",
  operator: "===",
  left: {
    type: "Identifier",
    name: "foo"
  },
  right: {
    type: "Identifier",
    name: "bar"
  }
}
我们从添加 BinaryExpression 访问者方法开始：

export default function({ types: t }) {
  return {
    visitor: {
      BinaryExpression(path) {
        // ...
      }
    }
  };
}
然后我们更确切一些，只关注哪些使用了 === 的 BinaryExpression。

visitor: {
  BinaryExpression(path) {
    if (path.node.operator !== "===") {
      return;
    }

    // ...
  }
}
现在我们用新的标识符来替换 left 属性：

BinaryExpression(path) {
  if (path.node.operator !== "===") {
    return;
  }

  path.node.left = t.identifier("sebmck");
  // ...
}
于是如果我们运行这个插件我们会得到：

sebmck === bar;
现在只需要替换 right 属性了。

BinaryExpression(path) {
  if (path.node.operator !== "===") {
    return;
  }

  path.node.left = t.identifier("sebmck");
  path.node.right = t.identifier("dork");
}
这就是我们的最终结果了：


sebmck === dork;
完美！我们的第一个 Babel 插件。